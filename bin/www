#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('flex-api:');
// var http = require('http');
const https = require('https');
const fs = require('fs');
const path = require('path');

// Load SSL certificate and key
const sslKey = fs.readFileSync(path.join(__dirname, 'ssl/.key'));
const sslCert = fs.readFileSync(path.join(__dirname, 'ssl/.cert'));

/**
 * Get port from environment and store in Express.
 */

const PORT = normalizePort(process.env.PORT || 443);
// app.set('port', port);

/**
 * Create HTTP .
 */

// var  = http.createServer(app);

// Create HTTPS 
const httpsServer = https.createServer({ key: sslKey, cert: sslCert }, app);

// Start HTTPS  and listen on provided port
httpsServer.listen(PORT, () => {
  console.log(`HTTPS  running at https://flex.highspring.com:${PORT}`);
});


// .listen(port);
httpsServer.on('error', onError);
httpsServer.on('listening', onListening);


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = httpsServer.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
